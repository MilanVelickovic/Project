{"ast":null,"code":"var _jsxFileName = \"/home/milan/Desktop/React/project/src/components/GenreSlider/GenreSlider.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport * as actionTypes from '../../store/actions';\nimport MovieThumbnail from './MovieThumbnail/MovieThumbnail';\nimport classes from './GenreSlider.module.css';\n\nclass GenreSlider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.findIndexOfGenre = genreName => {\n      return this.props.genres.map(element => {\n        return element.name;\n      }).indexOf(genreName);\n    };\n\n    this.findIndexOfMovie = (genreIndex, movieTitle) => {\n      return this.props.movies[genreIndex].movies.map(element => {\n        return element.title;\n      }).indexOf(movieTitle);\n    };\n  }\n\n  componentDidMount() {\n    this.loadMoviesHandler();\n  }\n\n  loadMoviesHandler() {\n    axios.get(`https://api.themoviedb.org/3/discover/movie?with_genres=${this.props.id}&api_key=${this.props.apiKey}`).then(response => {\n      let moviesByGenre = {\n        genre: this.props.genre,\n        movies: response.data.results.slice(0, this.props.numberOfMoviesPerGenre)\n      };\n      this.props.storeMovies(moviesByGenre);\n    });\n  }\n\n  render() {\n    let moviesContent = null;\n\n    if (this.props.movies.length !== this.props.numberOfGenres - 1) {\n      moviesContent = this.props.movies.map(genre => {\n        if (genre.genre === this.props.genre) {\n          let genreIndex = this.findIndexOfGenre(genre.genre);\n          return [...genre.movies].map(movie => {\n            const details = {\n              title: movie.title,\n              thumbnail: movie.poster_path,\n              vote: movie.vote_average,\n              overview: movie.overview,\n              releaseDate: movie.release_date\n            };\n            return /*#__PURE__*/React.createElement(MovieThumbnail, {\n              key: movie.id,\n              details: details,\n              row: genreIndex,\n              selectedRow: this.props.selectedRow,\n              column: this.findIndexOfMovie(genreIndex, movie.title),\n              selectedColumn: this.props.selectedColumn,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 32\n              }\n            });\n          });\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.GenreSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, this.props.genre), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, moviesContent));\n  }\n\n}\n\n;\n\nconst dataFromStore = state => {\n  return {\n    apiKey: state.apiKey,\n    genres: state.genres,\n    numberOfGenres: state.numberOfGenres,\n    numberOfMoviesPerGenre: state.numberOfMoviesPerGenre,\n    movies: state.movies\n  };\n};\n\nconst dispatching = dispatch => {\n  return {\n    storeMovies: moviesByGenre => dispatch({\n      type: actionTypes.STORE_MOVIES,\n      moviesByGenre: moviesByGenre\n    })\n  };\n};\n\nexport default connect(dataFromStore, dispatching)(GenreSlider);","map":{"version":3,"sources":["/home/milan/Desktop/React/project/src/components/GenreSlider/GenreSlider.js"],"names":["React","Component","connect","axios","actionTypes","MovieThumbnail","classes","GenreSlider","findIndexOfGenre","genreName","props","genres","map","element","name","indexOf","findIndexOfMovie","genreIndex","movieTitle","movies","title","componentDidMount","loadMoviesHandler","get","id","apiKey","then","response","moviesByGenre","genre","data","results","slice","numberOfMoviesPerGenre","storeMovies","render","moviesContent","length","numberOfGenres","movie","details","thumbnail","poster_path","vote","vote_average","overview","releaseDate","release_date","selectedRow","selectedColumn","dataFromStore","state","dispatching","dispatch","type","STORE_MOVIES"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport * as actionTypes from '../../store/actions';\n\nimport MovieThumbnail from './MovieThumbnail/MovieThumbnail';\n\nimport classes from './GenreSlider.module.css';\n\nclass GenreSlider extends Component {\n\n    componentDidMount() {\n        this.loadMoviesHandler();  \n    }\n\n    loadMoviesHandler() {\n        axios.get(`https://api.themoviedb.org/3/discover/movie?with_genres=${this.props.id}&api_key=${this.props.apiKey}`)\n            .then(response => {\n                let moviesByGenre = {\n                genre: this.props.genre,\n                movies: response.data.results.slice(0, this.props.numberOfMoviesPerGenre)\n            }\n            this.props.storeMovies(moviesByGenre);  \n        });\n    }\n\n    findIndexOfGenre = (genreName) => {     \n        return this.props.genres.map(element => {\n            return element.name;\n        }).indexOf(genreName);\n    }\n\n    findIndexOfMovie = (genreIndex, movieTitle) => {\n        return this.props.movies[genreIndex].movies.map(element => {\n            return element.title;\n        }).indexOf(movieTitle);\n    }\n\n    render () {\n        let moviesContent = null;\n        if (this.props.movies.length !== this.props.numberOfGenres - 1) {\n            moviesContent = this.props.movies.map(genre => {\n                if (genre.genre === this.props.genre) {\n                    let genreIndex = this.findIndexOfGenre(genre.genre);\n                    return [...genre.movies].map(movie => {\n                        const details = {\n                            title: movie.title,\n                            thumbnail: movie.poster_path,\n                            vote: movie.vote_average,\n                            overview: movie.overview,\n                            releaseDate: movie.release_date\n                        }\n                        return <MovieThumbnail \n                                    key={movie.id}\n                                    details={details}\n                                    row={genreIndex} \n                                    selectedRow={this.props.selectedRow}\n                                    column={this.findIndexOfMovie(genreIndex, movie.title)}\n                                    selectedColumn={this.props.selectedColumn}/>\n                    });\n                }\n            });\n        }\n        return (\n            <div className={classes.GenreSlider}>\n                <p>{this.props.genre}</p>\n                <div className={classes.movies}>\n                    {moviesContent}\n                </div>\n            </div>\n        );\n    }\n};\n\nconst dataFromStore = state => {\n    return {\n        apiKey: state.apiKey,\n        genres: state.genres,\n        numberOfGenres: state.numberOfGenres,\n        numberOfMoviesPerGenre: state.numberOfMoviesPerGenre,\n        movies: state.movies\n    }\n}\n\nconst dispatching = dispatch => {\n    return {\n        storeMovies: (moviesByGenre) => dispatch({\n            type: actionTypes.STORE_MOVIES, \n            moviesByGenre: moviesByGenre\n        })\n    }\n}\n\nexport default connect(dataFromStore, dispatching)(GenreSlider);"]},"metadata":{},"sourceType":"module"}