{"ast":null,"code":"var _jsxFileName = \"/home/milan/Desktop/React/project/src/components/GenreSlider/GenreSlider.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport * as actionTypes from '../../store/actions';\nimport MovieThumbnail from './MovieThumbnail/MovieThumbnail';\nimport classes from './GenreSlider.module.css';\n\nclass GenreSlider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.selectedMovieHandler = e => {\n      let row = 0;\n      let column = 0;\n\n      switch (e.key) {\n        case 'arrowRigth':\n          if (column < this.props.numberOfMoviesPerGenre) {\n            column++;\n          } else {\n            column = 0;\n          }\n\n          break;\n\n        case 'arrowUp':\n          if (row < this.props.numberOfGenres) {\n            row++;\n          } else {\n            row = 0;\n          }\n\n          break;\n\n        case 'arrowLeft':\n          if (column > 0) {\n            column--;\n          } else {\n            column = 0;\n          }\n\n          break;\n\n        case 'arrowDown':\n          if (row > 0) {\n            row--;\n          } else {\n            row = 0;\n          }\n\n          break;\n\n        default:\n          console.log(\"Nope!\");\n          break;\n      }\n\n      console.log(\"Row: \" + row + \", column: \" + column);\n    };\n  }\n\n  componentDidMount() {\n    this.loadMoviesHandler();\n    this.selectedMovieHandler();\n  }\n\n  async loadMoviesHandler() {\n    await axios.get(`https://api.themoviedb.org/3/discover/movie?with_genres=${this.props.id}&api_key=${this.props.apiKey}`).then(response => {\n      let moviesByGenre = {\n        genre: this.props.genre,\n        movies: response.data.results.slice(0, this.props.numberOfMoviesPerGenre)\n      };\n      console.log(moviesByGenre);\n      this.props.storeMovies(moviesByGenre);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.GenreSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, this.props.genre), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, this.props.movies.map(genre => {\n      if (genre.genre === this.props.genre) {\n        return [...genre.movies].map(movie => {\n          return /*#__PURE__*/React.createElement(MovieThumbnail, {\n            key: movie.id,\n            title: movie.title,\n            thumbnail: movie.backdrop_path,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 40\n            }\n          });\n        });\n      }\n    })));\n  }\n\n}\n\n;\n\nconst dataFromStore = state => {\n  return {\n    apiKey: state.apiKey,\n    genres: state.genres,\n    numberOfGenres: state.numberOfGenres,\n    numberOfMoviesPerGenre: state.numberOfMoviesPerGenre,\n    movies: state.movies\n  };\n};\n\nconst dispatching = dispatch => {\n  return {\n    storeMovies: moviesByGenre => dispatch({\n      type: actionTypes.STORE_MOVIES,\n      moviesByGenre: moviesByGenre\n    })\n  };\n};\n\nexport default connect(dataFromStore, dispatching)(GenreSlider);","map":{"version":3,"sources":["/home/milan/Desktop/React/project/src/components/GenreSlider/GenreSlider.js"],"names":["React","Component","connect","axios","actionTypes","MovieThumbnail","classes","GenreSlider","selectedMovieHandler","e","row","column","key","props","numberOfMoviesPerGenre","numberOfGenres","console","log","componentDidMount","loadMoviesHandler","get","id","apiKey","then","response","moviesByGenre","genre","movies","data","results","slice","storeMovies","render","map","movie","title","backdrop_path","dataFromStore","state","genres","dispatching","dispatch","type","STORE_MOVIES"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport * as actionTypes from '../../store/actions';\n\nimport MovieThumbnail from './MovieThumbnail/MovieThumbnail';\n\nimport classes from './GenreSlider.module.css';\n\nclass GenreSlider extends Component {\n\n    componentDidMount() {\n        this.loadMoviesHandler();  \n        this.selectedMovieHandler();\n    }\n\n    async loadMoviesHandler() {\n        await axios.get(`https://api.themoviedb.org/3/discover/movie?with_genres=${this.props.id}&api_key=${this.props.apiKey}`)\n            .then(response => {\n                let moviesByGenre = {\n                genre: this.props.genre,\n                movies: response.data.results.slice(0, this.props.numberOfMoviesPerGenre)\n            }\n            console.log(moviesByGenre);\n            this.props.storeMovies(moviesByGenre);  \n        });\n    }\n\n    selectedMovieHandler = (e) => {\n        let row = 0;\n        let column = 0;\n        switch (e.key) {\n            case 'arrowRigth':\n                if (column < this.props.numberOfMoviesPerGenre) {\n                    column++;\n                } else {\n                    column = 0;\n                }\n                break;\n            case 'arrowUp':\n                if (row < this.props.numberOfGenres) {\n                    row++;\n                } else {\n                    row = 0;\n                }\n                break;\n            case 'arrowLeft':\n                if (column > 0) {\n                    column--;\n                } else {\n                    column = 0;\n                }\n                break;\n            case 'arrowDown':\n                if (row > 0) {\n                    row--;\n                } else {\n                    row = 0;\n                }\n                break;\n            default:\n                console.log(\"Nope!\");\n                break;                \n        }\n        console.log(\"Row: \" + row + \", column: \" + column);\n    }\n\n    render () {\n        return (\n            <div className={classes.GenreSlider}>\n                <p>{this.props.genre}</p>\n                <div className={classes.movies}>\n                    {this.props.movies.map(genre => {\n                        if (genre.genre === this.props.genre) {\n                            return [...genre.movies].map(movie => {\n                                return <MovieThumbnail key={movie.id} title={movie.title} thumbnail={movie.backdrop_path}/>\n                            });\n                        }\n                    })}\n                </div>\n            </div>\n        );\n    }\n};\n\nconst dataFromStore = state => {\n    return {\n        apiKey: state.apiKey,\n        genres: state.genres,\n        numberOfGenres: state.numberOfGenres,\n        numberOfMoviesPerGenre: state.numberOfMoviesPerGenre,\n        movies: state.movies\n    }\n}\n\nconst dispatching = dispatch => {\n    return {\n        storeMovies: (moviesByGenre) => dispatch({\n            type: actionTypes.STORE_MOVIES, \n            moviesByGenre: moviesByGenre\n        })\n    }\n}\n\nexport default connect(dataFromStore, dispatching)(GenreSlider);"]},"metadata":{},"sourceType":"module"}