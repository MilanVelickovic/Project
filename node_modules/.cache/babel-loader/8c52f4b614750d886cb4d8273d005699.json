{"ast":null,"code":"var _jsxFileName = \"/home/milan/Desktop/React/project/src/containers/Home/Home.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport * as actionTypes from '../../store/actions';\nimport GenreSlider from '../../components/GenreSlider/GenreSlider';\nimport classes from './Home.module.css';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedRow: 0,\n      selectedColumn: 0\n    };\n\n    this.lala = () => {\n      for (let i = 1; i < 5; i++) {\n        console.log(genre);\n      }\n    };\n\n    this.selectedMovieHandler = event => {\n      let row = this.state.selectedRow;\n      let column = this.state.selectedColumn;\n\n      switch (event.keyCode) {\n        case 37:\n          if (column > 0) {\n            column--;\n          } else {\n            column = this.props.numberOfMoviesPerGenre - 1;\n          }\n\n          break;\n\n        case 40:\n          if (row < this.props.numberOfGenres - 1) {\n            row++;\n          } else {\n            row = 0;\n          }\n\n          break;\n\n        case 39:\n          if (column < this.props.numberOfMoviesPerGenre - 1) {\n            column++;\n          } else {\n            column = 0;\n          }\n\n          break;\n\n        case 38:\n          if (row > 0) {\n            row--;\n          } else {\n            row = this.props.numberOfGenres - 1;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        selectedRow: row,\n        selectedColumn: column\n      });\n    };\n\n    this.loadGenresHandler = () => {\n      axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${this.props.apiKey}&language=en-US`).then(response => this.props.storeGenres(response.data.genres.slice(0, this.props.numberOfGenres)));\n    };\n\n    this.loadMoviesHandler = (genreId, genre) => {\n      console.log(genreId);\n      console.log(genre);\n      axios.get(`https://api.themoviedb.org/3/discover/movie?with_genres=${genreId}&api_key=${this.props.apiKey}`).then(response => {\n        let moviesByGenre = {\n          genre: genre,\n          movies: response.data.results.slice(0, this.props.numberOfMoviesPerGenre)\n        };\n        this.props.storeMovies(moviesByGenre);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadGenresHandler();\n    this.lala();\n    document.addEventListener(\"keydown\", this.selectedMovieHandler);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, this.props.genres.map(genre => {\n      return /*#__PURE__*/React.createElement(GenreSlider, {\n        key: genre.id,\n        id: genre.id,\n        genre: genre.name,\n        selectedRow: this.state.selectedRow,\n        selectedColumn: this.state.selectedColumn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 28\n        }\n      });\n    }));\n  }\n\n}\n\nconst dataFromStore = state => {\n  return {\n    apiKey: state.apiKey,\n    numberOfGenres: state.numberOfGenres,\n    numberOfMoviesPerGenre: state.numberOfMoviesPerGenre,\n    genres: state.genres\n  };\n};\n\nconst dispatching = dispatch => {\n  return {\n    storeGenres: genresArray => dispatch({\n      type: actionTypes.STORE_GENRES,\n      genres: genresArray\n    }),\n    storeMovies: moviesByGenre => dispatch({\n      type: actionTypes.STORE_MOVIES,\n      moviesByGenre: moviesByGenre\n    })\n  };\n};\n\nexport default connect(dataFromStore, dispatching)(Home);","map":{"version":3,"sources":["/home/milan/Desktop/React/project/src/containers/Home/Home.js"],"names":["React","Component","connect","axios","actionTypes","GenreSlider","classes","Home","state","selectedRow","selectedColumn","lala","i","console","log","genre","selectedMovieHandler","event","row","column","keyCode","props","numberOfMoviesPerGenre","numberOfGenres","setState","loadGenresHandler","get","apiKey","then","response","storeGenres","data","genres","slice","loadMoviesHandler","genreId","moviesByGenre","movies","results","storeMovies","componentDidMount","document","addEventListener","render","map","id","name","dataFromStore","dispatching","dispatch","genresArray","type","STORE_GENRES","STORE_MOVIES"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport * as actionTypes from '../../store/actions';\n\nimport GenreSlider from '../../components/GenreSlider/GenreSlider';\n\nimport classes from './Home.module.css';\n\nclass Home extends Component {\n\n    state = {\n        selectedRow: 0,\n        selectedColumn: 0\n    }\n\n    componentDidMount() {\n        this.loadGenresHandler();\n        this.lala();\n        document.addEventListener(\"keydown\", this.selectedMovieHandler);\n    }\n\n    lala = () => {\n        for (let i = 1; i < 5; i++) {\n            console.log(genre);\n        }\n    }\n\n    selectedMovieHandler = (event) => {\n        let row = this.state.selectedRow;\n        let column = this.state.selectedColumn;\n        switch (event.keyCode) {\n            case 37:\n                if (column > 0) {\n                    column--;\n                } else {\n                    column = this.props.numberOfMoviesPerGenre - 1;\n                }\n                break;\n            case 40:\n                if (row < this.props.numberOfGenres - 1) {\n                    row++;\n                } else {\n                    row = 0;\n                }\n                break;\n            case 39:\n                if (column < this.props.numberOfMoviesPerGenre - 1) {\n                    column++;\n                } else {\n                    column = 0;\n                }\n                break;\n            case 38:\n                if (row > 0) {\n                    row--;\n                } else {\n                    row = this.props.numberOfGenres - 1;\n                }\n                break;\n            default:\n                break;                \n        }\n        this.setState({\n            selectedRow: row,\n            selectedColumn: column\n        })\n    }\n\n    loadGenresHandler = () => {\n        axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${this.props.apiKey}&language=en-US`)\n            .then(response => this.props.storeGenres(response.data.genres.slice(0, this.props.numberOfGenres)));\n    }\n\n    loadMoviesHandler = (genreId, genre) => {\n        console.log(genreId);\n        console.log(genre);\n        axios.get(`https://api.themoviedb.org/3/discover/movie?with_genres=${genreId}&api_key=${this.props.apiKey}`)\n            .then(response => {\n                let moviesByGenre = {\n                    genre: genre,\n                    movies: response.data.results.slice(0, this.props.numberOfMoviesPerGenre)\n                }\n                this.props.storeMovies(moviesByGenre);  \n            });\n    }\n\n    render () {\n        return (\n            <div className={classes.Home}>\n                {this.props.genres.map(genre => {\n                    return <GenreSlider key={genre.id} id={genre.id} genre={genre.name} selectedRow={this.state.selectedRow} selectedColumn={this.state.selectedColumn}/>;\n                })}\n            </div>\n        );\n        \n    }\n}\n\nconst dataFromStore = state => {\n    return {\n        apiKey: state.apiKey,\n        numberOfGenres: state.numberOfGenres,\n        numberOfMoviesPerGenre: state.numberOfMoviesPerGenre,\n        genres: state.genres\n    }\n}\n\nconst dispatching = dispatch => {\n    return {\n        storeGenres: (genresArray) => dispatch({\n            type: actionTypes.STORE_GENRES,\n            genres: genresArray\n        }),\n        storeMovies: (moviesByGenre) => dispatch({\n            type: actionTypes.STORE_MOVIES, \n            moviesByGenre: moviesByGenre\n        })\n    }\n}\n\nexport default connect(dataFromStore, dispatching)(Home);\n"]},"metadata":{},"sourceType":"module"}