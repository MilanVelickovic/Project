{"ast":null,"code":"var _jsxFileName = \"/home/milan/Desktop/React/project/src/components/GenreSlider/GenreSlider.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport * as actionTypes from '../../store/actions';\nimport MovieThumbnail from './MovieThumbnail/MovieThumbnail';\nimport classes from './GenreSlider.module.css';\n\nclass GenreSlider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.findIndexOfGenre = genreName => {\n      return this.props.genres.map(element => {\n        return element.name;\n      }).indexOf(genreName);\n    };\n\n    this.findIndexOfMovie = (genreName, movieTitle) => {\n      return this.findIndexOfGenre(genreName.genre);\n    };\n  }\n\n  componentDidMount() {\n    this.loadMoviesHandler();\n  }\n\n  async loadMoviesHandler() {\n    await axios.get(`https://api.themoviedb.org/3/discover/movie?with_genres=${this.props.id}&api_key=${this.props.apiKey}`).then(response => {\n      let moviesByGenre = {\n        genre: this.props.genre,\n        movies: response.data.results.slice(0, this.props.numberOfMoviesPerGenre)\n      };\n      this.props.storeMovies(moviesByGenre);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.GenreSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, this.props.genre), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, this.props.movies.map(genre => {\n      if (genre.genre === this.props.genre) {\n        return [...genre.movies].map(movie => {\n          console.log(this.findIndexOfMovie(genre.genre, movie.title));\n          return /*#__PURE__*/React.createElement(MovieThumbnail, {\n            key: movie.id,\n            title: movie.title,\n            thumbnail: movie.backdrop_path,\n            row: this.findIndexOfGenre(genre.genre),\n            column: 1,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 40\n            }\n          });\n        });\n      }\n    })));\n  }\n\n}\n\n;\n\nconst dataFromStore = state => {\n  return {\n    apiKey: state.apiKey,\n    genres: state.genres,\n    numberOfMoviesPerGenre: state.numberOfMoviesPerGenre,\n    movies: state.movies\n  };\n};\n\nconst dispatching = dispatch => {\n  return {\n    storeMovies: moviesByGenre => dispatch({\n      type: actionTypes.STORE_MOVIES,\n      moviesByGenre: moviesByGenre\n    })\n  };\n};\n\nexport default connect(dataFromStore, dispatching)(GenreSlider);","map":{"version":3,"sources":["/home/milan/Desktop/React/project/src/components/GenreSlider/GenreSlider.js"],"names":["React","Component","connect","axios","actionTypes","MovieThumbnail","classes","GenreSlider","findIndexOfGenre","genreName","props","genres","map","element","name","indexOf","findIndexOfMovie","movieTitle","genre","componentDidMount","loadMoviesHandler","get","id","apiKey","then","response","moviesByGenre","movies","data","results","slice","numberOfMoviesPerGenre","storeMovies","render","movie","console","log","title","backdrop_path","dataFromStore","state","dispatching","dispatch","type","STORE_MOVIES"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport * as actionTypes from '../../store/actions';\n\nimport MovieThumbnail from './MovieThumbnail/MovieThumbnail';\n\nimport classes from './GenreSlider.module.css';\n\nclass GenreSlider extends Component {\n\n    componentDidMount() {\n        this.loadMoviesHandler();  \n    }\n\n    async loadMoviesHandler() {\n        await axios.get(`https://api.themoviedb.org/3/discover/movie?with_genres=${this.props.id}&api_key=${this.props.apiKey}`)\n            .then(response => {\n                let moviesByGenre = {\n                genre: this.props.genre,\n                movies: response.data.results.slice(0, this.props.numberOfMoviesPerGenre)\n            }\n            this.props.storeMovies(moviesByGenre);  \n        });\n    }\n\n    findIndexOfGenre = (genreName) => {     \n        return this.props.genres.map(element => {\n            return element.name;\n        }).indexOf(genreName);\n    }\n\n    findIndexOfMovie = (genreName, movieTitle) => {\n        return this.findIndexOfGenre(genreName.genre);\n    }\n\n    render () {\n        return (\n            <div className={classes.GenreSlider}>\n                <p>{this.props.genre}</p>\n                <div className={classes.movies}>\n                    {this.props.movies.map(genre => {\n                        if (genre.genre === this.props.genre) {\n                            return [...genre.movies].map(movie => {\n                                console.log(this.findIndexOfMovie(genre.genre, movie.title));\n                                return <MovieThumbnail key={movie.id} title={movie.title} thumbnail={movie.backdrop_path} row={this.findIndexOfGenre(genre.genre)} column={1}/>\n                            });\n                        }\n                    })}\n                </div>\n            </div>\n        );\n    }\n};\n\nconst dataFromStore = state => {\n    return {\n        apiKey: state.apiKey,\n        genres: state.genres,\n        numberOfMoviesPerGenre: state.numberOfMoviesPerGenre,\n        movies: state.movies\n    }\n}\n\nconst dispatching = dispatch => {\n    return {\n        storeMovies: (moviesByGenre) => dispatch({\n            type: actionTypes.STORE_MOVIES, \n            moviesByGenre: moviesByGenre\n        })\n    }\n}\n\nexport default connect(dataFromStore, dispatching)(GenreSlider);"]},"metadata":{},"sourceType":"module"}